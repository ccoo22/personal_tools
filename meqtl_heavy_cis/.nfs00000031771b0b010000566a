#!/home/genesky/software/r/3.5.1/bin/Rscript
library(docopt)
"Usage: MatrixEQTL_CIS.r -o <file> -r <file> -m <file> -n <file> -s <file> -t <file> [-w <string> -x <string> -y <string> -c <file>]
Options:
	-o , --output_cis <file>		the cis output file
	-r , --output_tra <file>		the tra output file
	-m , --mRNA_file <file>			the input mRNA profile file
	-n , --mRNA_loc_file <file>		the input mRNA gene location file
	-s , --SNV_file <file>			the input SNV type file
	-t , --SNV_loc_file <file>		the input SNV location file
	-w , --cisdist <string>			the cisdist value [default: 1e6]
	-x , --cis_p <string>			the cis pvalue [default: 0.05]
	-y , --tra_p <string>			the tra pvalue [default: 0]
	-c , --cov_file <file> 			the covariates file [default: /home/lhj/cov_test.xls]" -> doc

opts			<- docopt(doc, version = 'Program : EQTL cis analysis based on mRNA and SNV data \n		lhj 272\n')
mRNA_input		<- opts$mRNA_file
mRNA_loc 		<- opts$mRNA_loc_file
SNV_input		<- opts$SNV_file
SNV_loc 		<- opts$SNV_loc_file
output_cis		<- opts$output_cis
output_tra		<- opts$output_tra
cov_input 		<- opts$cov_file
cis_pval		<- opts$cis_p
tra_pval		<- opts$tra_p
cisDist_val		<- opts$cisdist

# 测试参数
# mRNA_input		<- "/home/lhj/test/eQTL/Matrix_eQTL/tmp/MatrixEQTL/data/GE.txt"
# mRNA_loc 		<- "/home/lhj/test/eQTL/Matrix_eQTL/tmp/MatrixEQTL/data/geneloc.txt"
# SNV_input		<- "/home/lhj/test/eQTL/Matrix_eQTL/tmp/MatrixEQTL/data/SNP.txt"
# SNV_loc 		<- "/home/lhj/test/eQTL/Matrix_eQTL/tmp/MatrixEQTL/data/snpsloc.txt"
# output_cis		<- "/home/lhj/test/eQTL/Matrix_eQTL/tmp/cis.txt"
# output_tra		<- "/home/lhj/test/eQTL/Matrix_eQTL/tmp/tra.txt"
# cov_input 		<- "/home/lhj/test/eQTL/Matrix_eQTL/tmp/MatrixEQTL/data/Covariates.txt"

#########
.libPaths("/home/genesky/software/r/3.5.1/lib64/R/library/")
library(MatrixEQTL)

useModel = modelLINEAR

# Genotype file name
SNP_file_name <- SNV_input
snps_location_file_name <- SNV_loc

# Gene expression file name
expression_file_name <- mRNA_input
gene_location_file_name <- mRNA_loc

# Covariates file name
covariates_file_name <- cov_input

# Output file name
output_file_name_cis <- output_cis
output_file_name_tra <- output_tra

# Only associations significant at this level will be saved
# pvOutputThreshold_cis = 0.05
# pvOutputThreshold_tra = 0

pvOutputThreshold_cis = as.numeric(cis_pval)
pvOutputThreshold_tra = as.numeric(tra_pval)

# Set to numeric() for identity
errorCovariance = numeric()

# cisDist = 1e6
cisDist = as.numeric(cisDist_val)

## Load genotype data
snps = SlicedData$new()
snps$fileDelimiter = "\t"      # the TAB character
snps$fileOmitCharacters = "NA" # denote missing values;
snps$fileSkipRows = 1          # one row of column labels
snps$fileSkipColumns = 1       # one column of row labels
snps$fileSliceSize = 2000      # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name)

## Load gene expression data
gene = SlicedData$new()
gene$fileDelimiter = "\t"      # the TAB character
gene$fileOmitCharacters = "NA" # denote missing values;
gene$fileSkipRows = 1          # one row of column labels
gene$fileSkipColumns = 1       # one column of row labels
gene$fileSliceSize = 2000      # read file in slices of 2,000 rows
gene$LoadFile(expression_file_name)

## Load covariates
cvrt = SlicedData$new()
if(file.exists(covariates_file_name)) {
	cvrt$fileDelimiter = "\t"      # the TAB character
	cvrt$fileOmitCharacters = "NA" # denote missing values;
	cvrt$fileSkipRows = 1          # one row of column labels
	cvrt$fileSkipColumns = 1       # one column of row labels
	if(length(covariates_file_name)>0) {
	cvrt$LoadFile(covariates_file_name)
	}
}

## Run the analysis
snpspos = read.table(snps_location_file_name, header = TRUE, stringsAsFactors = FALSE)
genepos = read.table(gene_location_file_name, header = TRUE, stringsAsFactors = FALSE)

me = Matrix_eQTL_main(
	snps = snps,
	gene = gene,
	cvrt = cvrt,
	output_file_name      = output_file_name_tra,
	pvOutputThreshold     = pvOutputThreshold_tra,
	useModel = useModel,
	errorCovariance = errorCovariance,
	verbose = TRUE,
	output_file_name.cis  = output_file_name_cis,
	pvOutputThreshold.cis = pvOutputThreshold_cis,
	snpspos = snpspos,
	genepos = genepos,
	cisDist = cisDist,
	pvalue.hist = "qqplot",
	min.pv.by.genesnp = FALSE,
	noFDRsaveMemory = FALSE)

# unlink(output_file_name_tra)
# unlink(output_file_name_cis)

# ## Results:

# cat('Analysis done in: ', me$time.in.sec, ' seconds', '\n')
# cat('Detected local eQTLs:', '\n')
# show(me$cis$eqtls)
# cat('Detected distant eQTLs:', '\n')
# show(me$trans$eqtls)

# ## Plot the Q-Q plot of local and distant p-values

# plot(me)